#pragma checksum "C:\Users\bschaap\source\repos\TicTacToeAIGame\TicTacToeAIGame\Components\GameBoard.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e2f15e69045284fc8e2aa822bbeb592e2a730d4d"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorTicTacToe.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\bschaap\source\repos\TicTacToeAIGame\TicTacToeAIGame\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\bschaap\source\repos\TicTacToeAIGame\TicTacToeAIGame\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\bschaap\source\repos\TicTacToeAIGame\TicTacToeAIGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\bschaap\source\repos\TicTacToeAIGame\TicTacToeAIGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\bschaap\source\repos\TicTacToeAIGame\TicTacToeAIGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\bschaap\source\repos\TicTacToeAIGame\TicTacToeAIGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\bschaap\source\repos\TicTacToeAIGame\TicTacToeAIGame\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\bschaap\source\repos\TicTacToeAIGame\TicTacToeAIGame\_Imports.razor"
using TicTacToeAIGame;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\bschaap\source\repos\TicTacToeAIGame\TicTacToeAIGame\_Imports.razor"
using BlazorTicTacToe.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\bschaap\source\repos\TicTacToeAIGame\TicTacToeAIGame\Components\GameBoard.razor"
using TicTacToeGame;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/tictactoe")]
    public partial class GameBoard : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 62 "C:\Users\bschaap\source\repos\TicTacToeAIGame\TicTacToeAIGame\Components\GameBoard.razor"
 

    Game newGame;

    [Parameter]
    public int currentPlayer { get; set; }

    public char Symbol { get; set; }

    public bool isWinner { get; set; }

    public bool shouldReloadBoard { get; set; }

    public string StartGame()
    {
        newGame = new Game();
        newGame.StartGame();

        InitializeCellsList();

        currentPlayer = newGame.GetCurrentPlayer();

        return "";
    }

    // Needed to manage the Cell.razor divs.
    //
    // TODO: Move this cell list functionality into the Game.cs logic, so cells aren't initialized in two places
    List<Cell> cells = new List<Cell>();

    void InitializeCellsList()
    {
        for (int rowIndex = 0; rowIndex < 3; rowIndex++)
        {
            for (int columnIndex = 0; columnIndex < 3; columnIndex++)
            {
                cells.Add(new Cell(rowIndex, columnIndex));
            }
        }
    }

    public int currentCellIndex { get; set; }

    void UpdateCell(Coordinates cords)
    {
        Cell tempCell = new Cell(cords.X, cords.Y);

        for (int index = 0; index < cells.Count; index++)
        {
            if (cells[index].coords == cords)
            {
                currentCellIndex = index;
                SaveMove();
            }
        }

    }

    public void SaveMove()
    {
        if (newGame.GetStatus() != Status.GameFinished)
        {
            if (cells[currentCellIndex].color == TileColor.Black)
            {
                if (currentPlayer == 1)
                {
                    cells[currentCellIndex].color = TileColor.Blue;
                    cells[currentCellIndex].symbol = 'X';

                }
                else if (currentPlayer == 2)
                {
                    cells[currentCellIndex].color = TileColor.Red;
                    cells[currentCellIndex].symbol = 'O';
                }
                else { }

                newGame.SaveMove(cells[currentCellIndex].coords.X, cells[currentCellIndex].coords.Y, currentPlayer);

                if (newGame.GetStatus() == Status.GameFinished)
                {

                    isWinner = true;
                    HighlightWinningCells();
                }

                currentPlayer = newGame.GetCurrentPlayer();
                shouldReloadBoard = true;
            }

        }
    }

    public int GetAWinningCell(Coordinates cord)
    {

        int aWinningCell = 0;

        switch (cord.X)
        {
            case 0: aWinningCell += 0; break;
            case 1: aWinningCell += 3; break;
            case 2: aWinningCell += 6; break;
            default: break;
        }

        switch (cord.Y)
        {
            case 0: aWinningCell += 0; break;
            case 1: aWinningCell += 1; break;
            case 2: aWinningCell += 2; break;
            default: break;
        }

        return aWinningCell;

    }

    public void HighlightWinningCells()
    {
        List<Coordinates> winCoords = newGame.GetWinningCoordinates();

        List<int> winningCells = new List<int>();

        foreach (Coordinates cord in winCoords)
        {
            winningCells.Add(GetAWinningCell(cord));
        }

        for (int cellIndex = 0; cellIndex < cells.Count; cellIndex++)
        {
            if (winningCells.Contains(cellIndex))
            {
                cells[cellIndex].color = TileColor.Green;
            }
            else if (cells[cellIndex].color == TileColor.Blue)
            {
                cells[cellIndex].color = TileColor.BlueLoser;
            }
            else if (cells[cellIndex].color == TileColor.Red)
            {
                cells[cellIndex].color = TileColor.RedLoser;
            }
            else
            {
                cells[cellIndex].color = TileColor.Grey;
            }
        }
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
